<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>darkowlzz</title>
    <link>https://darkowlzz.github.io/</link>
    <description>Recent content on darkowlzz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2017 15:26:09 +0530</lastBuildDate>
    
	<atom:link href="https://darkowlzz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Me</title>
      <link>https://darkowlzz.github.io/about/me/</link>
      <pubDate>Mon, 11 Dec 2017 15:26:09 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/about/me/</guid>
      <description>Github
Keybase
OpenHub
Goodreads
Old Logs
email</description>
    </item>
    
    <item>
      <title>Git Tag Signature Verification</title>
      <link>https://darkowlzz.github.io/post/git-tag-signature-verification/</link>
      <pubDate>Sat, 25 Nov 2017 18:51:26 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-tag-signature-verification/</guid>
      <description>This post is also a sequel of other posts related to git and signature verification (Git Commit Signature Verification and Git Commit Timestamp). This one is based on adding tag signature verification in src-d/go-git.
 Verify by taking everything apart Verify using src-d/go-git  Git tags are signed similar to commits with small differences in their storage format. Like commit, which are stored in .git/objects/, tag are stored in .</description>
    </item>
    
    <item>
      <title>Git Commit Timestamp</title>
      <link>https://darkowlzz.github.io/post/git-commit-timestamp/</link>
      <pubDate>Fri, 24 Nov 2017 16:24:40 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-commit-timestamp/</guid>
      <description>This is related to the previous post, Git Commit Signature Verification. That post was based on the work of implementing git commit signature verification in src-d/go-git. This post is a sequel to that in a way.
The previous post ended with an example of how to create a custom commit and run verification on it.
ts := time.Unix(0000000000, 0) commit := &amp;Commit{ Hash: plumbing.NewHash(&#34;8a9cea36fe052711fbc42b86e1f99a4fa0065deb&#34;), Author: Signature{Name: &#34;darkowlzz&#34;, Email: &#34;example@darkowlzz.space&#34;, When: ts}, Committer: Signature{Name: &#34;</description>
    </item>
    
    <item>
      <title>Git Commit Signature Verification</title>
      <link>https://darkowlzz.github.io/post/git-commit-signature-verification/</link>
      <pubDate>Thu, 23 Nov 2017 23:42:00 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-commit-signature-verification/</guid>
      <description>This post is about PGP signature verification of git commits.
 Verify by taking things apart Verify using git cli Verify using golang&amp;rsquo;s crypto/openpgp package Verify using src-d/go-git  Git commits and any kind of data can be signed using GPG (GNU Privacy Guard) program, available at https://www.gnupg.org/. It implements the OpenPGP standard for encryption.
4 Things Data This is the data/content that is to be communicated or published and requires signing for verifiable authenticity.</description>
    </item>
    
    <item>
      <title>Helm Chart Config Preview</title>
      <link>https://darkowlzz.github.io/post/helm-chart-config-preview/</link>
      <pubDate>Wed, 26 Jul 2017 22:09:57 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/helm-chart-config-preview/</guid>
      <description>Helm is a kubernetes(k8s) package manager and it enables downloading k8s charts and installing them in k8s cluster. Charts are configured with default values, which can be customized before installation.
helm inspect [chart] shows the Chart.yaml and values.yaml content of a given chart. The configurations are stored in values.yaml and heml inspect values [chart] shows only the content of values.yaml.
values.yaml of mariadb chart: --- image: bitnami/mariadb:10.1.23-r2 ## Specify an imagePullPolicy (Required) imagePullPolicy: IfNotPresent ## Specify password for root user # mariadbRootPassword: ## Create a database user # mariadbUser: # mariadbPassword: ## Create a database # mariadbDatabase: .</description>
    </item>
    
    <item>
      <title>Minikube Config</title>
      <link>https://darkowlzz.github.io/post/minikube-config/</link>
      <pubDate>Mon, 24 Jul 2017 13:48:53 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/minikube-config/</guid>
      <description>Minikube is a kubernetes(k8s) project to enable running single node k8s cluster locally inside a VM, which can be used by developers to prepare their apps for k8s in development phase. For more info, refer their github project.
Minikube starts with some sane default VM configs for any modern machine.
DefaultMemory = 2048 DefaultCPUS = 2 DefaultDiskSize = &amp;quot;20g&amp;quot; MinimumDiskSizeMB = 2000 DefaultVMDriver = &amp;quot;virtualbox&amp;quot;  Which is fine for most of the time.</description>
    </item>
    
    <item>
      <title>Securing Custom Deployments via Travis CI</title>
      <link>https://darkowlzz.github.io/post/securing-custom-deployments-via-travis-ci/</link>
      <pubDate>Wed, 05 Jul 2017 17:30:54 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/securing-custom-deployments-via-travis-ci/</guid>
      <description>Custom Deployment Encrypted Secrets in Build Environment Limiting Deployments From Specific Branches  Travis CI - Test and Deploy with Confidence. DEPLOY. D E P L O Y.
Travis CI can be used as a publicly hosted deployment system with inbuilt support for deployments to various providers. There are well documented guides about doing the same. But once in a while, one might end up using some service that&amp;rsquo;s not supported by Travis CI or even a specific feature that&amp;rsquo;s not supported, although there&amp;rsquo;s support for the provider.</description>
    </item>
    
    <item>
      <title>Learning Hugo</title>
      <link>https://darkowlzz.github.io/post/learning-hugo/</link>
      <pubDate>Wed, 28 Jun 2017 16:53:59 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/learning-hugo/</guid>
      <description>This site is just a playground to learn hugo, how it works and the workflow. Also, since the generated site is just a collection of static web pages, this site is hosted on github as github pages and gets automatically deployed at every commit to the master branch.
The hugo project for this site is at the source branch. Every commit to this branch triggers a travis build, where the new pages are generated and with some custom deployment shell commands, the generated pages are committed to master branch.</description>
    </item>
    
  </channel>
</rss>