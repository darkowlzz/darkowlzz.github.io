<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on darkowlzz</title>
    <link>https://darkowlzz.github.io/post/</link>
    <description>Recent content in Posts on darkowlzz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Feb 2018 14:51:54 +0530</lastBuildDate>
    
	<atom:link href="https://darkowlzz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dep - Solve Errors</title>
      <link>https://darkowlzz.github.io/post/dep-solve-errors/</link>
      <pubDate>Mon, 26 Feb 2018 14:51:54 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-solve-errors/</guid>
      <description>dep seems to work great for those who are able to get it to work with their projects. But often, there are issues that a new dep user faces while trying out dep for the first time. The issues when dep fails to solve the dependency graph. When this happens, dep needs some help from the user to solve the issue.
A lot of people find it hard to get started with dep when the very first command, dep init fails and they don&amp;rsquo;t know how do go ahead with that.</description>
    </item>
    
    <item>
      <title>Lastpass Cli Helpers</title>
      <link>https://darkowlzz.github.io/post/lastpass-cli-helpers/</link>
      <pubDate>Mon, 15 Jan 2018 22:45:57 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/lastpass-cli-helpers/</guid>
      <description>lpass is a lastpass cli client with a lot of subcommands and options to do a lot of things which are hard to remember. Based on my day-to-day usage of it, I created a set of bash functions to simplify the usage. An up-to-date version of the functions can be found here.
There are four functions:
lpget() to get the password of a given site.
$ lpget google.com copied google.com secret to clipboard  lpuser() to get the username of a given site.</description>
    </item>
    
    <item>
      <title>dep - Pin Executable Version</title>
      <link>https://darkowlzz.github.io/post/dep-pin-executable-version/</link>
      <pubDate>Fri, 22 Dec 2017 23:06:59 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-pin-executable-version/</guid>
      <description>Along with managing project dependencies, dep also provides a way to manage the development tools (linters, generators, etc) to be used with the project. This can be done by adding the tool&amp;rsquo;s full package path in the required field in the manifest file (Gopkg.toml). Unlike other fields, required considers packages, not project. Hence, if a project wants to install a tool, say dep, required should contain github.com/golang/dep/cmd/dep.
required = [&amp;quot;github.com/golang/dep/cmd/dep&amp;quot;]  If a project doesn&amp;rsquo;t contain any import path of a package, required field can be used to tell dep to include that.</description>
    </item>
    
    <item>
      <title>dep - Picking Version From GOPATH</title>
      <link>https://darkowlzz.github.io/post/dep-picking-version-from-gopath/</link>
      <pubDate>Wed, 20 Dec 2017 23:36:25 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-picking-version-from-gopath/</guid>
      <description>This post is about a feature in golang/dep that could be used by developers who are not using vendor directory to vendor their dependencies, but depend on the version of the dependencies checked out in their GOPATH.
dep provides a subcommand, dep init, for initializing a go project to use dep. It creates two files, a manifest file, called Gopkg.toml, and a lock file, called Gopkg.lock. These files contain details about all the dependencies analyzed by dep while initializing.</description>
    </item>
    
    <item>
      <title>go-git - Grep</title>
      <link>https://darkowlzz.github.io/post/git-grep/</link>
      <pubDate>Tue, 12 Dec 2017 18:39:02 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-grep/</guid>
      <description>go-git now supports git-grep. Follow the &amp;ldquo;go-git&amp;rdquo; tag to read other go-git related posts.
 git-grep The Amazing Worktree Grep Options Option Validation Grep Result  git-grep  git-grep - Print lines matching a pattern
 git-scm.com   git-grep performs pattern matching in the tracked files in the work tree, blobs registered in the index files, or blobs in given tree objects. The result of match is sent to stdout, which consists of filename and content of the line.</description>
    </item>
    
    <item>
      <title>go-git - Clean</title>
      <link>https://darkowlzz.github.io/post/git-clean/</link>
      <pubDate>Tue, 12 Dec 2017 17:26:54 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-clean/</guid>
      <description>go-git now supports git-clean. Follow the &amp;ldquo;go-git&amp;rdquo; tag to read other go-git related posts.
Git provides a way to clean the working tree by deleting any untracked files with the git clean command. By default, git clean would delete any untracked files. Untracked (empty) directories are not deleted. To delete them, -d option can be passed.
Since clean can be harmful if not used carefully, git wouldn&amp;rsquo;t just delete the files.</description>
    </item>
    
    <item>
      <title>go-git - Object Alternates</title>
      <link>https://darkowlzz.github.io/post/git-object-alternates/</link>
      <pubDate>Mon, 11 Dec 2017 16:16:02 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-object-alternates/</guid>
      <description>This is another git related post coming out of more contributions to the src-d/go-git project. Other related post can be found by following the &amp;ldquo;go-git&amp;rdquo; tag at the bottom of this page.
Git clone offers an option to clone a repo without actually copying the git objects to a new location, but sharing the objects with the new repo. This can be done by using the --shared or -s option. It&amp;rsquo;s for local repos only.</description>
    </item>
    
    <item>
      <title>go-git - Tag Signature Verification</title>
      <link>https://darkowlzz.github.io/post/git-tag-signature-verification/</link>
      <pubDate>Sat, 25 Nov 2017 18:51:26 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-tag-signature-verification/</guid>
      <description>This post is also a sequel of other posts related to git and signature verification (Git Commit Signature Verification and Git Commit Timestamp). This one is based on adding tag signature verification in src-d/go-git.
 Verify by taking everything apart Verify using src-d/go-git  Git tags are signed similar to commits with small differences in their storage format. Like commit, which are stored in .git/objects/, tag are stored in .</description>
    </item>
    
    <item>
      <title>go-git - Commit Timestamp</title>
      <link>https://darkowlzz.github.io/post/git-commit-timestamp/</link>
      <pubDate>Fri, 24 Nov 2017 16:24:40 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-commit-timestamp/</guid>
      <description>This is related to the previous post, Git Commit Signature Verification. That post was based on the work of implementing git commit signature verification in src-d/go-git. This post is a sequel to that in a way.
The previous post ended with an example of how to create a custom commit and run verification on it.
ts := time.Unix(0000000000, 0) commit := &amp;amp;Commit{ Hash: plumbing.NewHash(&amp;#34;8a9cea36fe052711fbc42b86e1f99a4fa0065deb&amp;#34;), Author: Signature{Name: &amp;#34;darkowlzz&amp;#34;, Email: &amp;#34;example@darkowlzz.space&amp;#34;, When: ts}, Committer: Signature{Name: &amp;#34;darkowlzz&amp;#34;, Email: &amp;#34;example@darkowlzz.</description>
    </item>
    
    <item>
      <title>go-git - Commit Signature Verification</title>
      <link>https://darkowlzz.github.io/post/git-commit-signature-verification/</link>
      <pubDate>Thu, 23 Nov 2017 23:42:00 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-commit-signature-verification/</guid>
      <description>This post is about PGP signature verification of git commits.
 Verify by taking things apart Verify using git cli Verify using golang&amp;rsquo;s crypto/openpgp package Verify using src-d/go-git  Git commits and any kind of data can be signed using GPG (GNU Privacy Guard) program, available at https://www.gnupg.org/. It implements the OpenPGP standard for encryption.
4 Things Data This is the data/content that is to be communicated or published and requires signing for verifiable authenticity.</description>
    </item>
    
    <item>
      <title>Helm Chart Config Preview</title>
      <link>https://darkowlzz.github.io/post/helm-chart-config-preview/</link>
      <pubDate>Wed, 26 Jul 2017 22:09:57 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/helm-chart-config-preview/</guid>
      <description>Helm is a kubernetes(k8s) package manager and it enables downloading k8s charts and installing them in k8s cluster. Charts are configured with default values, which can be customized before installation.
helm inspect [chart] shows the Chart.yaml and values.yaml content of a given chart. The configurations are stored in values.yaml and heml inspect values [chart] shows only the content of values.yaml.
values.yaml of mariadb chart: --- image: bitnami/mariadb:10.1.23-r2 ## Specify an imagePullPolicy (Required) imagePullPolicy: IfNotPresent ## Specify password for root user # mariadbRootPassword: ## Create a database user # mariadbUser: # mariadbPassword: ## Create a database # mariadbDatabase: .</description>
    </item>
    
    <item>
      <title>Minikube Config</title>
      <link>https://darkowlzz.github.io/post/minikube-config/</link>
      <pubDate>Mon, 24 Jul 2017 13:48:53 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/minikube-config/</guid>
      <description>Minikube is a kubernetes(k8s) project to enable running single node k8s cluster locally inside a VM, which can be used by developers to prepare their apps for k8s in development phase. For more info, refer their github project.
Minikube starts with some sane default VM configs for any modern machine.
DefaultMemory = 2048 DefaultCPUS = 2 DefaultDiskSize = &amp;quot;20g&amp;quot; MinimumDiskSizeMB = 2000 DefaultVMDriver = &amp;quot;virtualbox&amp;quot;  Which is fine for most of the time.</description>
    </item>
    
    <item>
      <title>Securing Custom Deployments via Travis CI</title>
      <link>https://darkowlzz.github.io/post/securing-custom-deployments-via-travis-ci/</link>
      <pubDate>Wed, 05 Jul 2017 17:30:54 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/securing-custom-deployments-via-travis-ci/</guid>
      <description>Custom Deployment Encrypted Secrets in Build Environment Limiting Deployments From Specific Branches  Travis CI - Test and Deploy with Confidence. DEPLOY. D E P L O Y.
Travis CI can be used as a publicly hosted deployment system with inbuilt support for deployments to various providers. There are well documented guides about doing the same. But once in a while, one might end up using some service that&amp;rsquo;s not supported by Travis CI or even a specific feature that&amp;rsquo;s not supported, although there&amp;rsquo;s support for the provider.</description>
    </item>
    
    <item>
      <title>Learning Hugo</title>
      <link>https://darkowlzz.github.io/post/learning-hugo/</link>
      <pubDate>Wed, 28 Jun 2017 16:53:59 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/learning-hugo/</guid>
      <description>This site is just a playground to learn hugo, how it works and the workflow. Also, since the generated site is just a collection of static web pages, this site is hosted on github as github pages and gets automatically deployed at every commit to the master branch.
The hugo project for this site is at the source branch. Every commit to this branch triggers a travis build, where the new pages are generated and with some custom deployment shell commands, the generated pages are committed to master branch.</description>
    </item>
    
  </channel>
</rss>