<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dep on darkowlzz</title>
    <link>https://darkowlzz.github.io/tags/dep/</link>
    <description>Recent content in Dep on darkowlzz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Feb 2018 14:51:54 +0530</lastBuildDate>
    
	<atom:link href="https://darkowlzz.github.io/tags/dep/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dep - Solve Errors</title>
      <link>https://darkowlzz.github.io/post/dep-solve-errors/</link>
      <pubDate>Mon, 26 Feb 2018 14:51:54 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-solve-errors/</guid>
      <description>dep seems to work great for those who are able to get it to work with their projects. But often, there are issues that a new dep user faces while trying out dep for the first time. The issues when dep fails to solve the dependency graph. When this happens, dep needs some help from the user to solve the issue.
A lot of people find it hard to get started with dep when the very first command, dep init fails and they don&amp;rsquo;t know how do go ahead with that.</description>
    </item>
    
    <item>
      <title>dep - Pin Executable Version</title>
      <link>https://darkowlzz.github.io/post/dep-pin-executable-version/</link>
      <pubDate>Fri, 22 Dec 2017 23:06:59 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-pin-executable-version/</guid>
      <description>Along with managing project dependencies, dep also provides a way to manage the development tools (linters, generators, etc) to be used with the project. This can be done by adding the tool&amp;rsquo;s full package path in the required field in the manifest file (Gopkg.toml). Unlike other fields, required considers packages, not project. Hence, if a project wants to install a tool, say dep, required should contain github.com/golang/dep/cmd/dep.
required = [&amp;quot;github.com/golang/dep/cmd/dep&amp;quot;]  If a project doesn&amp;rsquo;t contain any import path of a package, required field can be used to tell dep to include that.</description>
    </item>
    
    <item>
      <title>dep - Picking Version From GOPATH</title>
      <link>https://darkowlzz.github.io/post/dep-picking-version-from-gopath/</link>
      <pubDate>Wed, 20 Dec 2017 23:36:25 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-picking-version-from-gopath/</guid>
      <description>This post is about a feature in golang/dep that could be used by developers who are not using vendor directory to vendor their dependencies, but depend on the version of the dependencies checked out in their GOPATH.
dep provides a subcommand, dep init, for initializing a go project to use dep. It creates two files, a manifest file, called Gopkg.toml, and a lock file, called Gopkg.lock. These files contain details about all the dependencies analyzed by dep while initializing.</description>
    </item>
    
  </channel>
</rss>