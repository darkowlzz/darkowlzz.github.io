<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on darkowlzz</title>
    <link>https://darkowlzz.github.io/tags/go/</link>
    <description>Recent content in Go on darkowlzz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 23:36:25 +0530</lastBuildDate>
    
	<atom:link href="https://darkowlzz.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dep - Picking Version From Gopath</title>
      <link>https://darkowlzz.github.io/post/dep-picking-version-from-gopath/</link>
      <pubDate>Wed, 20 Dec 2017 23:36:25 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/dep-picking-version-from-gopath/</guid>
      <description>This post is about a feature in golang/dep that could be used by developers who are not using vendor directory to vendor their dependencies, but depend on the version of the dependencies checked out in their GOPATH.
dep provides a subcommand, dep init, for initializing a go project to use dep. It creates two files, a manifest file, called Gopkg.toml, and a lock file, called Gopkg.lock. These files contain details about all the dependencies analyzed by dep while initializing.</description>
    </item>
    
    <item>
      <title>Git Grep</title>
      <link>https://darkowlzz.github.io/post/git-grep/</link>
      <pubDate>Tue, 12 Dec 2017 18:39:02 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-grep/</guid>
      <description>go-git now supports git-grep. Follow the &amp;ldquo;go-git&amp;rdquo; tag to read other go-git related posts.
 git-grep The Amazing Worktree Grep Options Option Validation Grep Result  git-grep  git-grep - Print lines matching a pattern
 git-scm.com   git-grep performs pattern matching in the tracked files in the work tree, blobs registered in the index files, or blobs in given tree objects. The result of match is sent to stdout, which consists of filename and content of the line.</description>
    </item>
    
    <item>
      <title>Git Clean</title>
      <link>https://darkowlzz.github.io/post/git-clean/</link>
      <pubDate>Tue, 12 Dec 2017 17:26:54 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-clean/</guid>
      <description>go-git now supports git-clean. Follow the &amp;ldquo;go-git&amp;rdquo; tag to read other go-git related posts.
Git provides a way to clean the working tree by deleting any untracked files with the git clean command. By default, git clean would delete any untracked files. Untracked (empty) directories are not deleted. To delete them, -d option can be passed.
Since clean can be harmful if not used carefully, git wouldn&amp;rsquo;t just delete the files.</description>
    </item>
    
    <item>
      <title>Git Object Alternates</title>
      <link>https://darkowlzz.github.io/post/git-object-alternates/</link>
      <pubDate>Mon, 11 Dec 2017 16:16:02 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-object-alternates/</guid>
      <description>This is another git related post coming out of more contributions to the src-d/go-git project. Other related post can be found by following the &amp;ldquo;go-git&amp;rdquo; tag at the bottom of this page.
Git clone offers an option to clone a repo without actually copying the git objects to a new location, but sharing the objects with the new repo. This can be done by using the --shared or -s option. It&amp;rsquo;s for local repos only.</description>
    </item>
    
    <item>
      <title>Git Tag Signature Verification</title>
      <link>https://darkowlzz.github.io/post/git-tag-signature-verification/</link>
      <pubDate>Sat, 25 Nov 2017 18:51:26 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-tag-signature-verification/</guid>
      <description>This post is also a sequel of other posts related to git and signature verification (Git Commit Signature Verification and Git Commit Timestamp). This one is based on adding tag signature verification in src-d/go-git.
 Verify by taking everything apart Verify using src-d/go-git  Git tags are signed similar to commits with small differences in their storage format. Like commit, which are stored in .git/objects/, tag are stored in .</description>
    </item>
    
    <item>
      <title>Git Commit Timestamp</title>
      <link>https://darkowlzz.github.io/post/git-commit-timestamp/</link>
      <pubDate>Fri, 24 Nov 2017 16:24:40 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-commit-timestamp/</guid>
      <description>This is related to the previous post, Git Commit Signature Verification. That post was based on the work of implementing git commit signature verification in src-d/go-git. This post is a sequel to that in a way.
The previous post ended with an example of how to create a custom commit and run verification on it.
ts := time.Unix(0000000000, 0) commit := &amp;amp;Commit{ Hash: plumbing.NewHash(&amp;#34;8a9cea36fe052711fbc42b86e1f99a4fa0065deb&amp;#34;), Author: Signature{Name: &amp;#34;darkowlzz&amp;#34;, Email: &amp;#34;example@darkowlzz.space&amp;#34;, When: ts}, Committer: Signature{Name: &amp;#34;darkowlzz&amp;#34;, Email: &amp;#34;example@darkowlzz.</description>
    </item>
    
    <item>
      <title>Git Commit Signature Verification</title>
      <link>https://darkowlzz.github.io/post/git-commit-signature-verification/</link>
      <pubDate>Thu, 23 Nov 2017 23:42:00 +0530</pubDate>
      
      <guid>https://darkowlzz.github.io/post/git-commit-signature-verification/</guid>
      <description>This post is about PGP signature verification of git commits.
 Verify by taking things apart Verify using git cli Verify using golang&amp;rsquo;s crypto/openpgp package Verify using src-d/go-git  Git commits and any kind of data can be signed using GPG (GNU Privacy Guard) program, available at https://www.gnupg.org/. It implements the OpenPGP standard for encryption.
4 Things Data This is the data/content that is to be communicated or published and requires signing for verifiable authenticity.</description>
    </item>
    
  </channel>
</rss>